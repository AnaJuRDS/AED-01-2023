#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#define MAX 1001
#define INF 0x3f3f3f3fU

typedef unsigned grafo;

uint dist[MAX];
uint graph[MAX][MAX];

void dijkstra(int, int, grafo g[MAX][MAX], grafo *);

int main()
{
    int n, m, c, r, e, u, v;

    while (scanf("%d %d", &n, &m) == 2)
    {
        memset(graph, INF, sizeof(graph)); //inicializa a estrutura

        for (int i = 0; i < m; ++i)
        {
            scanf("%d %d", &u, &v);
            graph[u][v] = graph[v][u] = 1; //define arestas
        }

        scanf("%d %d %d", &c, &r, &e);

        for (int i = 0; i <= n; ++i)
            graph[e][i] = graph[i][e] = INF; //cidade proibida = inalcançavel

        dijkstra(c, n, graph, dist);

        printf("%d\n", dist[r]);
    }

    return 0;
}

void dijkstra(int s, int n, grafo g[MAXSIZE][MAXSIZE], grafo *d)
{
    bool vis[n + 1];
    memset(vis, false, sizeof(vis)); //inicializa todos os vértices como não visitados

    for (int i = 0; i <= n; ++i)
        d[i] = INF;

    d[s] = 0;

    for (int i = 0; i <= n; ++i)
    {
        int v = -1;
        for (int j = 0; j <= n; ++j)
        {
            if (!vis[j] && (v == -1 || d[j] < d[v])) //não visitado e com menor distância
                v = j;
        }

        if (d[v] == INF) 
            break;

        vis[v] = true;  //marca o vértice visitado
        
        for (int j = 0; j <= n; ++j)
        {
            if (d[v] + g[v][j] < d[j])
                d[j] = d[v] + g[v][j];
        }
    }
}
